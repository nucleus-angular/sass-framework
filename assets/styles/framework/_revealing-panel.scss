/**
 * @section Revealing Panel
 *
 * Revealing panel is a type of modal window system that displays a site overlay and content on top of that overlay.  There are a number of different ways to display the revealing panel.
 *
 * @TODO: add example using absolute positioning
 * @TODO: add animations in (needs to support angular)
 *
 * You can display the panel on all 4 sides on the page.
 *
 * ```html
 * <ul>
 *   <li><a class="show-revealing-panel" href data-position="center">click me to show revealing panel center (hit escape to close)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="left">click me to show revealing panel left (hit escape to close)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="top">click me to show revealing panel top (hit escape to close)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="right">click me to show revealing panel right (hit escape to close)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="bottom">click me to show revealing panel bottom (hit escape to close)</a></li>
 * </ul>
 * <div class="revealing-panel">
 *   <div class="site-overlay"></div>
 *   <div class="content">
 *     Revealing panel content.  The content auto set the over to scroll, just ahead and just try...
 *     <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
 *     <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
 *     <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
 *     BOTTOM!!!
 *   </div>
 * </div>
 * ```
 *
 * <script type="text/javascript">
 * $(document).ready(function() {
 *   var cssSizes = {
 *     center: {width: '500px'},
 *     left: {width: '500px'},
 *     right: {width: '500px'},
 *     top: {height: '500px'},
 *     bottom: {height: '500px'}
 *   };
 *   var clearCss = {width: '', height: ''};
 *
 *   $('.show-revealing-panel').click(function(event) {
 *     event.preventDefault();
 *     var position = $(this).data('position');
 *
 *     $('.revealing-panel .content').css(cssSizes[position]);
 *     $('.revealing-panel').addClass('is-active').addClass(position);
 *     $('.site-overlay').addClass('is-active');
 *   });
 *
 *   $(document).keydown(function(event) {
 *     if(event.which === 27) {
 *       $('.revealing-panel').removeClass('is-active').css(clearCss).removeClass('center left top right bottom');
 *       $('.revealing-panel .content').css(clearCss);
 *       $('.site-overlay').removeClass('is-active');
 *     }
 *   });
 * });
 * </script>
 */

 /*
  * @section Revealing Panel
  * @subsection Reveal Animation
  *
  * @TODO: have animation based on is-active class
  *
  * Added css for angular animation
  *
  * @mixin reveal-animation
  * @param $property
  * @param $start-value
  * @param $end-value
  * @param $duration
  * @param $timing-function
  * @param $border-side
  * @param $border-size
  * @param $border-type
  * @param $color-gray
  */
// @mixin reveal-animation($property, $start-value, $end-value, $duration, $timing-function, $border-side: '', $border-size: '', $border-type: '', $color-gray: '') {
//   &.reveal {
//     @if $border-side != '' {
//       border-#{$border-side}: $border-size $border-type $color-gray;
//     }

//     //default value, should be manually handled on a case by case basis
//     #{$property}: $end-value;
//   }

//   //angular animation support
//   &.reveal-add,
//   &.reveal-remove {
//     @include transition($property $duration $timing-function);

//     @if $border-side != '' {
//       border-#{$border-side}: $border-size $border-type $color-gray;
//     }
//   }

//   &.reveal-add {
//     #{$property}: $start-value;
//   }

//   &.reveal-add.reveal-add-active {
//     #{$property}: $end-value;
//   }

//   &.reveal-remove {
//     #{$property}: $end-value;
//   }

//   &.reveal-remove.reveal-remove-active {
//     #{$property}: $start-value;
//   }

//   @if $property == 'height' or $property == 'width' {
//     .inner-content {
//       min-#{$property}: $end-value - $border-size;
//     }
//   }
// }

.revealing-panel {
  //useful for want to have a revealing panel within an element in the page instead of on the page itself
  &.absolute {
    > .content {
      position: absolute;
    }
  }

  /*&.reveal {
    overflow: visible;
  }

  &.reveal-add,
  &.reveal-remove {
    overflow: hidden;
  }*/
  &.center {
    > .content {
      //in order to support changing height and width on a fixed positioned element that should remain centered, we need to make the top a static position and
      //specific a width on the element.

      //a static top will allow the height of the element to expand and contracted automatically as needed (height should not have to be set)
      top: $top-content-center-rp;

      //setting a left/right of 0 with a margin of 0 auto will allow the element to remain centered as the width of the element is changed
      left: 0;
      right: 0;
      margin: 0 auto;

      //this prevents the content from going off the bottom of the screen.  the default is a conservative number (500px) however it should probably be overriden
      //in javascript by calculating the window size so you can make use of the space on the bottom when available (and the default can be changed).
      max-height: $max-height-content-center-rp;

      border-radius: $border-radius-center-rp;
      display: none;
      border: $border-rp;
      //opacity: 1;

      /*&.reveal,
      &.reveal-add,
      &.reveal-remove {
        display: inline-block;
      }*/

      //@include reveal-animation(opacity, 0, 1, .25s, linear);
    }
  }

  &.left {
    &.is-active {
      > .content {
        //these are not variables as it is not expect for these values to be consistent through the application
        //width: 500px;
      }
    }

    > .content {
      //@include reveal-animation(width, 0, 500px, .25s, linear, right, 1px, solid, $color-black);

      top: 0;
      left: 0;
      bottom: 0;
      width: 0;
    }
  }

  &.right {
    &.is-active {
      > .content {
        //this are not set as it is not expect for these values to be consistent for each instance of a revealing panel
        //width: 500px;
      }
    }

    > .content {
      //@include reveal-animation(width, 0, 500px, .25s, linear, left, 1px, solid, $color-black);

      top: 0;
      right: 0;
      bottom: 0;
      width: 0;
    }
  }

  &.top {
    &.is-active {
      > .content {
        //this are not set as it is not expect for these values to be consistent for each instance of a revealing panel
        //height: 500px;
      }
    }

    > .content {
      //@include reveal-animation(height, 0, 500px, .25s, linear, bottom, 1px, solid, $color-black);

      top: 0;
      left: 0;
      right: 0;
      height: 0;
    }
  }

  &.bottom {
    &.is-active {
      > .content {
        //this are not set as it is not expect for these values to be consistent for each instance of a revealing panel
        //height: 500px;
      }
    }

    > .content {
      //@include reveal-animation(height, 0, 500px, .25s, linear, top, 1px, solid, $color-black);

      bottom: 0;
      left: 0;
      right: 0;
      height: 0;
    }
  }

  > .content {
    position: fixed;
    z-index: $z-index-content-rp;
    background-color: $background-color-content-rp;
    overflow: auto;
    display: none;
    padding: $padding-content-rp;
  }

  &.is-active {
    > .content {
      display: block;
    }
  }
}
